import {Injectable} from '@nestjs/common';
import {Markup} from 'telegraf';
import {CallbackQuery} from 'typegram';
import {timezones} from '../../utils/timezone';
import {ACTIONS, shopName} from '../constants';
import {MyContext} from '../telegram-context';

export enum Shops {
	OZON = 'OZON',
	WB = 'WB',
	ALL = 'ALL',
}
@Injectable()
export class KeyboardService {
	startMenu(registerStatus: boolean) {
		const isNotRegistered = [
			[Markup.button.callback('‚úÖ –î–∞', ACTIONS.HAS_ACCOUNT)],
			[Markup.button.callback('Ô∏èÔ∏èÔ∏è ‚ùå –ù–µ—Ç', ACTIONS.HAS_NOT_ACCOUNT)],
			[Markup.button.callback('üí≠ –ù–µ –ø–æ–º–Ω—é', ACTIONS.HAS_ACCOUNT)],
			[Markup.button.callback('‚ÑπÔ∏è –û –±–æ—Ç–µ', ACTIONS.ABOUT)],
		];

		const isRegistered = [
			[Markup.button.callback('üìÉ –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å ', ACTIONS.GET_SUMMARY)],
			[Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞', ACTIONS.ACCOUNT_SETTINGS)],
			[Markup.button.callback('üë®‚Äçüíª –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö', ACTIONS.IN_WORKS_REVIEWS)],
			[
				Markup.button.callback(
					'üë®‚Äçüíª –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ –∑–∞–∫–æ–Ω—á–∏–≤—à–∏—Ö—Å—è –æ—Å—Ç–∞—Ç–∫–∞—Ö',
					ACTIONS.IN_WORKS_LEFTOVER,
				),
			],
			[Markup.button.callback('‚ÑπÔ∏è –û –±–æ—Ç–µ', ACTIONS.ABOUT)],
		];

		const keyboard = registerStatus ? isRegistered : isNotRegistered;

		return {...Markup.inlineKeyboard(keyboard)};
	}

	shopsButtons() {
		const keyboard = [
			[Markup.button.callback('üîé –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã', ACTIONS.SHOW_ALL_ACTIVE_SHOPS)],
			[Markup.button.callback('‚úñ –°–∫—Ä—ã—Ç—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã', ACTIONS.SHOW_ALL_INACTIVE_SHOPS)],
			[Markup.button.callback('‚åö –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', ACTIONS.UPDATE_TIME)],
			[this.startButton('üíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')],
		];

		return {...Markup.inlineKeyboard(keyboard)};
	}

	removeShopsButtons(keysCount: number) {
		const button = !keysCount
			? [Markup.button.callback('–°–∫—Ä—ã—Ç—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã', ACTIONS.SHOW_ALL_INACTIVE_SHOPS)]
			: [Markup.button.callback('‚úñ –°–∫—Ä—ã—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã', ACTIONS.REMOVE_SHOPS)];

		const keyboard = [
			button,
			[Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', ACTIONS.ACCOUNT_SETTINGS)],
			[this.startButton('üíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')],
		];

		return {...Markup.inlineKeyboard(keyboard)};
	}

	addShopsButtons(keysCount: number) {
		const button = !keysCount
			? [Markup.button.callback('üîé –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã', ACTIONS.SHOW_ALL_ACTIVE_SHOPS)]
			: [Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ', ACTIONS.ADD_SHOPS)];

		const keyboard = [
			button,
			[Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', ACTIONS.ACCOUNT_SETTINGS)],
			[this.startButton('üíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')],
		];

		return {...Markup.inlineKeyboard(keyboard)};
	}

	selectShopsButtons(ctx: MyContext, mode: Shops) {
		let buttons = [];

		ctx.session.keys.forEach((key: any) => {
			if (key.selected)
				buttons.push([
					Markup.button.callback(
						`${shopName(key.name)}`,
						`${ACTIONS[`SELECT_SHOP_${mode}`]}-${key.keyId}`,
					),
				]);
			else
				buttons.push([
					Markup.button.callback(
						`${shopName(key.name, false)}`,
						`${ACTIONS[`SELECT_SHOP_${mode}`]}-${key.keyId}`,
					),
				]);
		});
		switch (mode) {
			case Shops.WB: {
				buttons.push(
					[Markup.button.callback('‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å', ACTIONS.APPLY_WB)],
					[Markup.button.callback('üî° –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', ACTIONS.SELECT_ALL_SHOPS_WB)],
				);
				break;
			}
			case Shops.OZON: {
				buttons.push(
					[Markup.button.callback('‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å', ACTIONS.APPLY_OZON)],
					[
						Markup.button.callback(
							'üî° –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã',
							ACTIONS.GET_OZON_SHOPS_SUMMARY,
						),
					],
				);
				break;
			}
			default: {
				buttons.push(
					[Markup.button.callback('‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å', ACTIONS.APPLY_ALL)],
					[Markup.button.callback('üî° –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', ACTIONS.SELECT_ALL_SHOPS)],
				);
				break;
			}
		}
		buttons.push(
			[Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', ACTIONS.BACK)],
			[this.startButton('üíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')],
		);
		//[Markup.button.callback('–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', ACTIONS.GET_WB_SHOPS_SUMMARY)]
		return {...Markup.inlineKeyboard(buttons)};
	}

	goMenu() {
		const keyboard = [[this.startButton('üíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]];

		return {...Markup.inlineKeyboard(keyboard)};

	}

	getPhoneNumber() {
		return {
			reply_markup: {
				one_time_keyboard: true,
				resize_keyboard: true,
				keyboard: [
					[
						Markup.button.contactRequest('–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø'),
						{
							text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
						},
					],
				],
			},
		};
	}

	selectAllShops() {
		const keyboard = [
			[Markup.button.callback('–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', ACTIONS.SELECT_ALL_SHOPS)],
		];

		return {...Markup.inlineKeyboard(keyboard)};
	}

	getTimezones() {
		return {
			...Markup.inlineKeyboard([
				...timezones.map(({timezone, callback_data}) => [
					Markup.button.callback(timezone, callback_data) as CallbackQuery,
				]),
				[Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', ACTIONS.UPDATE_TIME)],
			]),
		};
	}

	getSummaryById() {
		return {
			...Markup.inlineKeyboard([
				...timezones.map(({timezone, callback_data}) => [
					Markup.button.callback(timezone, callback_data) as CallbackQuery,
				]),
			]),
		};
	}

	getMp() {
		const keyboard = [
			[Markup.button.callback('OZON', ACTIONS.GET_OZON_SHOPS)],
			[Markup.button.callback('WILDBERRIES', ACTIONS.GET_WB_SHOPS)],
			[Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', ACTIONS.BACK)],
			[this.startButton('üíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')],
		];

		return {...Markup.inlineKeyboard(keyboard)};
	}

	getOzonShops() {
		const keyboard = [
			[Markup.button.callback('–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', ACTIONS.GET_OZON_SHOPS_SUMMARY)],
		];

		return {...Markup.inlineKeyboard(keyboard)};
	}

	getWBShops() {
		const keyboard = [
			[Markup.button.callback('–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', ACTIONS.GET_WB_SHOPS_SUMMARY)],
		];

		return {...Markup.inlineKeyboard(keyboard)};
	}

	// –°–æ–∑–¥–∞–µ–º —á–∞—Å—ã
	getHours() {
		const hourCount = 24;
		const inlineButtons: CallbackQuery[] = [];
		const allButtons = [];

		for (let index = 1; index <= hourCount; index++) {
			inlineButtons.push(
				Markup.button.callback(
					`${index}:00`,
					`${ACTIONS.GET_HOUR}${index}`,
				) as CallbackQuery,
			);

			if (index % 6 === 0) {
				allButtons.push([...inlineButtons]);
				inlineButtons.length = 0;
			}
		}

		return {
			...Markup.inlineKeyboard([
				...allButtons,
				[Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', ACTIONS.BACK_TO_TZ)],
			]),
		};
	}

	incorrectToken() {
		const keyboard = [
			[Markup.button.callback('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', ACTIONS.HAS_NOT_ACCOUNT)],
			[Markup.button.url('–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', 'https://t.me/shopstatsp')],
		];

		return {...Markup.inlineKeyboard(keyboard)};
	}

	emptyKeys() {
		const keyboard = [
			[Markup.button.url('–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç', 'https://app.shopstat.ru/analyt/adding-key')],
			[Markup.button.url('–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', 'https://t.me/shopstatsp')],
		];

		return {...Markup.inlineKeyboard(keyboard)};
	}

	updateTime() {
		const keyboard = [
			[Markup.button.callback('‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è', ACTIONS.UPDATE_TIMEZONE)],
			[Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', ACTIONS.ACCOUNT_SETTINGS)],
			[this.startButton('üíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')],
		];

		return {...Markup.inlineKeyboard(keyboard)};
	}

	backOrMenu() {
		return {
			...Markup.inlineKeyboard([
				[this.backButton('–ù–∞–∑–∞–¥')],
				[this.startButton('üíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')],
			]),
		};
	}

	private backButton(text = '–ù–∞–∑–∞–¥') {
		return Markup.button.callback(text, ACTIONS.BACK) as CallbackQuery;
	}

	private startButton(text = 'üíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'): CallbackQuery {
		return Markup.button.callback(text, ACTIONS.START) as unknown as CallbackQuery;
	}
}
